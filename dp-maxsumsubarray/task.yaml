accessible: true
author: Aubry Fran√ßois
context: |-
    The **maximum sum subarray problem** is the following:

    Given an array :math:`a` with :math:`n` integers, we want to find a subarray of :math:`a` such that the sum of its elements is as large as possible.

    Recall that subarray is a continuous range, you cannot skip some elements. Otherwise the problem would be trivial as one could just pick all positive elements.

    **Example:**

    .. image:: dp-intro/maxsubarray.png

    The goal of this task is to develop an :math:`O(n)` algorithm for this problem.


    In order to do so, we will reason about the structure of the solution. All of these observation are quite obvious but they allow
    slightly modify the problem in order to make it easier to solve.

    **Observations:**

    1. The maximum sum subarray will end at some element :math:`a[i]`
    2. The reamining subarray is either empty, or it is a maximum sum subarray ending at element :math:`a[i - 1]`

    The next figure illustrates this the second part of 2.

    .. image:: dp-intro/maxsubarray3.png

    So, the only thing that is unknown is the index :math:`i` where the maximum sum subarray ends.

    You should stop for a while and think about how to overcome this.

    A very simple and common way to overcome it is to just try all possibilities and take the maximum one. That it, we can just compute the maximum sum subarray ending at each index :math:`i \in \{0, 1, \ldots, n - 1\}`. Then the maximum sum subarray of :math:`a` is simply the maximum of these.

    Define an array :math:`maxEndingAt` such that :math:`maxEndingAt[i]` is the maximum sum subarray of :math:`a` that ends at index :math:`i`. What we said above is that:

    .. math::

      \textrm{maximum sum subarray of $a$} = \max_{i = 0}^{i - 1} maxEndingAt[i]

    It only remains to find an efficient way to compute :math:`maxEndingAt[i]` for each :math:`i`.

    Property 2. above gives us the answer. :math:`maxEndingAt[i]` will either be just the element :math:`a[i]` or it will be the maximum sum subarray ending at :math:`i - 1` plus :math:`a[i]`. That is:

    .. math::

      maxEndingAt[i] = \max(a[i], a[i] + maxEndingAt[i - 1])

    This can easily be computed in :math:`O(n)`.
environment: java8scala
evaluate: best
groups: false
limits:
    output: '40'
    memory: '1000'
    time: '50'
name: DP - Maximum sum subarray
network_grading: false
order: 9
problems:
    dp1-maxarraysum-1:
        allowed_exts:
        - .java
        header: |-
            Write an :math:`O(n)` algorithm to compute the maximum sum subarray.

            **Input**

            The input consist of two lines.

            1. The first line contains a single integer :math:`n` giving the size of :math:`a`.
            2. The second line contains :math:`n` integers separated by single spaces giving the elements of :math:`a`.

            **Output**

            The output consists of a single line with an integer: the value of the maximum sum subarray.
        name: Maximum sum subarray
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
