accessible: true
author: ''
context: |-
    We are now going to study another graph exploration algorithm called depth-first search (DFS). As we will DFS is extremely useful and with it we can solve a wide number of graph related problems.

    In DFS we start from a source node a then recursively visit each of its neighbors. Because of this recursive behavior, after we select the first neighbor :math:`u` of :math:`v` to be explored, the other neighbors of :math:`v` will only be considered after we have finished visiting the whole subgraph that is reachable from :math:`u`. This is the reason why the algorithm is called **depth-first**. To better ilustrate this consider the following example.

    .. image:: graphs-dfs/anim.gif

    Coding this algorithm is very simple and can be done as follows:

    .. code:: java

      static void dfs(LinkedList<Integer>[] g, int u, boolean[] visited) {
          visited[u] = true;
          for(int v : g[u]) if(!visited[v]) dfs(g, v, visited);
      }
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    memory: '1000'
    time: '1000'
name: ''
network_grading: false
problems:
    file:
        name: ''
        header: ''
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
