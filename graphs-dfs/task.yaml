accessible: true
author: Fran√ßois Aubry
context: |-
    We are now going to study another graph exploration algorithm called depth-first search (DFS). As we will see, DFS is extremely useful and we can solve a wide number of graph related problems with this algorithm.

    In DFS we start from a source node and then recursively visit each of its neighbours. Because of this recursive behavior, after we select the first neighbour :math:`u` of :math:`v` to be explored, the other neighbours of :math:`v` will only be considered after we have finished visiting the whole subgraph that is reachable from :math:`u`. This is the reason why this algorithm is called **depth-first** search. To better illustrate this, consider the following example.


    .. image:: graphs-dfs/dfs.gif


    Coding this algorithm is very simple as shown in the following code:

    .. code:: java

        static LinkedList<Integer>[] g;
        static boolean[] visited;

        static void dfs(int u) {
            visited[u] = true;
            for(int v : g[u]) if(!visited[v]) dfs(v);
        }

    If we execute the following code:

    .. code:: java

        ...
        boolean[] visited = new boolean[g.length];
        dfs(0);

    Then visited will be set to :math:`true` for every node that is reachable from node :math:`0`. In this way, DFS is a much more compact way of coding an algorithm to check for path existence.

    So far this does not really gives us something new. There are several ways in which we can extend this algorithm in order to solve different problems.

    Before we do so, it is often convenient to have a more informative state of each node during the search rather than a simple flag saying whether a node as been visited or not. We will start by replacing the :code:`visited` array by an array of integers called :code:`state` and define 3 possible states:

    .. code:: java

        static final int UNV = 0, OPEN = 1, CLOSED = 2;

    These 3 states have the following semantics:

    - :math:`state[u] = \textit{UNV}` : node :math:`u` has not been visited before. This corresponds to :math:`visited[u] = false` from before.
    - :math:`state[u] = \textit{OPEN}` : node :math:`u` has been visited but not all of its outgoing edges have been visited.
    - :math:`state[u] = \textit{CLOSED}` : means that all the edges going out of  :math:`u` have been visited.

    To extend the previous code to use the array :code:`state` respecting these semantics is quite simple. Every node should start with the state :math:`\textit{UNV}`. Then the first line should set the state to :math:`\textit{OPEN}` since at this point the node is visited but we did not yet visit any of its outgoing edges. Finally, after the :code:`for` loop finished we should set the state to :math:`\textit{CLOSED}`. We will also add an array :math:`parent` to keep for each node, who visited it as we did in the BFS algorithm.

    .. code:: java

        static final int UNV = 0, OPEN = 1, CLOSED = 2;
        static LinkedList<Integer>[] g;
        static int[] state;
        static Integer[] parent;

        static void dfsVisit(int u) {
            state[u] = OPEN;
            for(int v : g[u]) {
                if(state[v] == UNV) {
                    parent[v] = u;
                    dfsVisit(v);
                }
            }
            state[u] = CLOSED;
        }

    *Note:* In Java when you create the :math:`state` array every value is initialized to :math:`0 = UNV`. Therefore nothing needs to be done. In some other languages you need to make sure that you set the value of every node :math:`UNV` before you start the search.

    The following animation illustrates an execution of :code:`\dfsVisit(0)`.

    .. image:: graphs-dfs/states.gif

    As a first application of DFS we are going to see how we can use the states to simply check whether a directed graph contains a cycle.

    Note that the parent array defines a tree that is a subgraph of the input graph. We call it the *DFS tree*. To detect a cycle we make the following observation:

    - During the execution of :code:`dfsVisit(u)`, if any node :math:`v` is :math:`OPEN` then there exists a path from :math:`v` to :math:`u` on the DFS tree. This is so because since :math:`v` is still open and we are at node :math:`u` then :math:`v` must be an ancestor of :math:`u` in the DFS tree.

    Therefore if during the :code:`for` loop at node :math:`u` we find a neighbour :math:`v` that is :math:`OPEN` we must have a cycle in the graph since, as we just observed, this means that there is a path from :math:`v` to :math:`u` and this path together with the edge :math:`(u, v)` must form a cycle.

    We classify the edges of the graph in 4 categories with respect to a DFS.

    1. *Tree edges*: edges that belong to the DFS tree.
    2. *Cycle edges* (or *back edges*): edges from a descendant node to one of its ancestors. **They occur when at some point we have an edge between two** :math:`OPEN` **nodes**.
    3. *Forward edges*: a non tree edge from an ancestor node to a descendant node.
    4. *Cross edges*: edges between two nodes such that neither is an ancestor of the other.

    The following animation illustrates the execution of DFS together with the DFS tree and the different kinds of edges.

    |

    .. image:: graphs-dfs/tree.gif

    |

    We saw above that if there is a cycle edge in a graph then the graph contains a cycle. It is not hard to see that the converse is also true, that is, if there is a cycle then there is a cycle edge. Thus we can detect cycles as follows:

    .. code:: java

        static final int UNV = 0, OPEN = 1, CLOSED = 2;
        static LinkedList<Integer>[] g;
        static int[] state;
        static Integer[] parent;
        static boolean foundCycle;

        static void hasCycle() {
            foundCycle = false;
            state = new int[g.length];
            parent = new Integer[g.length];
            for(int u = 0; u < g.length; u++) {
                if(state[u] == UNV) {
                    dfsVisit(u);
                }
            }
        }

        static void dfsVisit(int u) {
            state[u] = OPEN;
            for(int v : g[u]) {
                if(state[v] == UNV) {
                    parent[v] = u;
                    dfsVisit(v);
                } else if(state[v] == OPEN) {
                    // (u, v) is a cycle edge, the graph contains a cycle
                    foundCycle = true;
                }
            }
            state[u] = CLOSED;
        }


    The graph has a cycle if and only if after executing :code:`hasCycle()` we have :code:`foundCycle == true`.

    The complexity of performing a DFS is :math:`O(V + E)` as the total work we perfom per node :math:`v` is :math:`O(outdeg(v))` and

    .. math::

       \displaystyle \sum_{v \in V} outdeg(v) = E
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: 'Graphs - Depth-first search: cycle finding'
network_grading: false
order: 13
problems:
    file:
        name: Cycle finding in directed graphs
        allowed_exts:
        - .java
        - .cpp
        - .py
        type: file
        header: |-
            You have seen how to detect whether a directed graph contains a cycle. In this task you will be asked to also build such a cycle if one exists.

            **Input**

            - One line with two integers :math:`n` and :math:`m` giving the number of nodes in the graph and the number of edges respectively.

            - :math:`m` lines each with two integers :math:`u` and :math:`v` giving that there is an edge from :math:`u` to :math:`v`. No edge will appear more than once in the input.

            **Constraints**

            * :math:`1 \leq n \leq 10^4`
            * :math:`0 \leq m \leq \min(10^6, n (n - 1) / 2)`
            * :math:`0 \leq u, v < n`

            **Output**

            Print *no* if the graph contains no cycles. Otherwise print any cycle in the graph. If your cycle is :math:`(v_1, v_2, \ldots, v_k, v_1)` then you should print a single line with the integers :math:`v_1, v_2, \ldots, v_k, v_1` separated by single spaces (note that you should repeat the first node at the end).

            If several cycles exists, any one will be accepted.

            **Sample Test Cases**

            `Sample input 1 <graphs-dfs/1.in>`_

            `Sample output 1 <graphs-dfs/1.ans>`_


            `Sample input 2 <graphs-dfs/2.in>`_

            `Sample output 2 <graphs-dfs/2.ans>`_
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
