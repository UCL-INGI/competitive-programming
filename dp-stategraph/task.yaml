accessible: true
author: ''
context: |-
    In this section we will discuss some theoretical aspects of DP a bit further.

    Underlying a DP problem there is a state graph. The nodes of this graph are the states defined for the problem. There is a directed edge from state :math:`s_1` to :math:`s_2` if :math:`s_2` directly depends on :math:`s_1` in the recurrence relation.

    To illustrate this, let's go back to the bottom-up knapsack example. The recurrence relation was:

    .. math::

      dp(i, c) = \max
       \begin{cases}
       v_i + dp(i - 1, c - w_i)       & \quad \text{take item $i$}\\
       dp(i - 1, c) & \quad \text{skip item $i$}
       \end{cases}

    Thus both :math:`(i - 1, c - w_i)` and :math:`(i - 1, c)` will have an edge to :math:`(i, c)`. The following figures illustrates this.

    .. image:: dp-stategraph/knapsack-states.png

    To show a complete example, imagine that we have :math:`5` items with weights :math:`[1, 3, 3, 2, 4]` and values :math:`[1, 4, 2, 3, 5]` to put on a knapsack of capacity :math:`10`. Then, with the above formulation, the state space graph is the following:

    .. image:: dp-stategraph/knapsackstate.png


    We claim that this graph does not contain cycles. We encourage you to think about why this is true before reading further.

    The reason why this graph is acyclic is that the first coordinate of each node, the object index, is strictly increasing in any path of the graph.

    This is a **crucial** property that our DP formulation must satisfy. If we happend to have cycles in the DP state graph then the order of the subproblems is not well defined and the algorithm will loop forever because the answer to some subproblems will depend on itself.

    To better illustrate this consider the shortest path problem. Given a graph :math:`G` with positive edge weights and a node :math:`s` we want to compute the shortest path length from :math:`s` to each other node. Let's have a state for each node :math:`v` of the input graph and define DP subproblems as follows:

    .. math::

       dp(v) = \textrm{length of the shortest path from $s$ to $v$}

    Clearly :math:`dp(s) = 0` since the shortest path from :math:`s` to itself is the empty path (we just stay where we are). Otherwise, to reach :math:`v`, we will have to go from :math:`s` to some node :math:`u` that is connected to :math:`v` and then traverse edge :math:`(u, v)`. But since we want a shortest path to reach :math:`v`, of course we will use a shortest path to reach :math:`u` as the following figure illustrates.

    .. image:: dp-stategraph/shortestpath.png

    This means that we reduced the problem :math:`dp(v)` of computing the shortest path to :math:`v`, to the problem of computing the shortest path to each in-neighbor :math:`u` of :math:`v`.

    We the write the following recurrence relation:

    .. math::

       dp(v) = \min_{u \ \textrm{in-neighbor of} \ v} dp(u) + w(u, v)

    What does the state graph for this DP formulation looks like? Think about it for a while.

    It is exactly the input graph :math:`G` !

    In this case a state is simply a node of the graph so clearly both graphs have the same set of nodes. But they also have the same set of edges since two states :math:`u` and :math:`v` are related to each other in the recurrence relation if and only if there is an edge from :math:`u` to :math:`v` them in :math:`G`.

    This means, according to what we said above, that this DP formulation will work if and only if the input graph :math:`G` is acyclic.

    We will see later when we study the Bellman-Ford algorithm how we can, at the cost of having more states, change the state formulation in order to break cycles and get a general shortest path algorithm.
environment: default
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    time: '30'
    memory: '100'
name: DP - State graph
network_grading: false
order: 20
problems:
    read:
        header: ''
        choices:
        -   valid: true
            text: 'Yes'
        limit: 0
        type: multiple_choice
        name: Mark this sections as read?
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
