accessible: true
author: ''
context: |
    In this task we will start looking into ways in which DP is used to stucture data to efficiently answer queries.

    We will start with cumulative sums.

    Given an array :math:`a`, and we want to be able to compute cumulative sums its subarrays efficiently. More formally, given two indexes :math:`i_1 \leq i_2`, we want to compute the value of

    .. math::

       \sum_{i = i_1}^{i_2} a[i] = a[i_1] + a[i_1 + 1] + \ldots + a[i_2]

    .. image:: dp-ds-cumsums/acsum.png
environment: pyjavacpp
evaluate: best
groups: false
limits:
    time: '1000'
    memory: '1000'
    output: '100'
name: 'DP - Data structures: cumulative sums'
network_grading: false
problems:
    file:
        type: file
        header: ''
        name: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
