accessible: true
author: ''
context: |
    In this task we will start looking into ways in which DP is used to stucture data to efficiently answer queries.

    We will start with cumulative sums.

    Given an array :math:`a`, and we want to be able to compute cumulative sums its subarrays efficiently. More formally, given two indexes :math:`i \leq j`, we want to compute the value of

    .. math::

       \sum_{k = i}^{j} a[k] = a[i] + a[i + 1] + \ldots + a[j]

    On way to answer such queries in :math:`O(1)` would be to pre-compute a matrix :math:`S` such that :math:`S[i][j]` equals the sum of elements :math:`i` through :math:`j` and simply retrieve the corresponding entry to answer a query. Done in a naive way this would cost us :math:`O(n^3)` to do since there are :math:`O(n^2)` entries in the matrix and each one take `O(n)` to evaluate. Something like this:

    .. code:: java

        static long[][] naivePreprocess(int[] a) {
            long[][] S = new long[a.length][a.length];
            for(int i = 0; i < a.length; i++) {
                for(int j = i; j < a.length; j++) {
                    for(int k = i; k <= j; k++) {
                        S[i][j] += a[i];
                    }
                }
            }
            return S;
        }

        static long sum(int i, int j, int[][] S) {return S[i][j];}

    Note that we use the type :code:`long` for the answer as these sums easily overflow.

    A slightly better but still quite slow alternative is see that the :math:`S[i][j]` are related to each other. It is easy to see that,
    if :math:`i < j` then

    .. math::

       S[i][j] = \sum_{k = i}^{j} a[k] = a[i] + \sum_{k = i}^{j - 1} a[k] =
       a[i] + S[i][j - 1].

    Thus,

    .. math::

      S[i][j] =
      \begin{cases}
        a[i]              & \quad \text{if } i = j \\
        a[i] + S[i][j - 1] & \quad \text{if } i < j
      \end{cases}

    allowing us to compute each :math:`S[i][j]` in :math:`O(1)`.

    To relate this to DP, you can think of the pairs :math:`(i, j)` as the states and :math:`S` as the subproblems which are related by the above recurrence.

    To be able to get a better running time, we need to avoid having to precompute :math:`O(n^2)` values since we already are able to compute each such value in constant time.

    We can actually get away by only compute :math:`O(n)` values. Can you think which values are enought to answer any query?

    We will focus only on the entries :math:`M[0][j]`. With simple algebraic manipulation we can easily relate any :math:`M[i][j]` to :math:`M[0][j]` and :math:`M[0][i - 1]`:

    .. math::

       M[i][j] = \sum_{k = i}^j a[k] =
       \left( \sum_{k = 0}^j a[k] \right) -
       \left( \sum_{k = 0}^{i - 1} a[k] \right) = M[0][j] - M[0][j - 1]

    Of couse this only works if :math:`j > 0`. If :math:`j = 0` then the only possible value for :math:`i` is 0 and :math:`M[0][0] = a[0]`.

    This is quite intuitive: to add all elements between :math:`i` and :math:`j` we add all elements from 0 to :math:`j` and then subtract the elements from 0 to :math:`i - 1`.

    The following picture illustrates this on a concrete example:

    .. image:: dp-ds-cumsums/acsum.png

    To wrap up, we drop the matrix :math:`M` and simply use an array :math:`s` such that :math:`s[i] = S[0][i]`. Then compute the values of :math:`s` using the same recurrence as before:

    .. math::

      s[i] =
      \begin{cases}
        a[0]            & \quad \text{if } i = 0 \\
        a[i] + s[i - 1] & \quad \text{if } i > 0
      \end{cases}
environment: pyjavacpp
evaluate: best
groups: false
limits:
    time: '1000'
    memory: '1000'
    output: '100'
name: 'DP - Data structures: cumulative sums'
network_grading: false
problems:
    file:
        type: file
        header: ''
        name: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
