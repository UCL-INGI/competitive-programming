accessible: false
author: ''
context: |+
    In this task we are going to learn how to compute the strongly connected components (SCC's) of a directed graph.

    A graph is said to be strongly connected if there exists at least one path between any pair of nodes in that subset.

    The strongly connected components of a graph are the maximal strongly connected subgraphs of that graph.

      **Example:**

      The following image show a graph with 4 SCC's. The nodes on the
      same SCC are colored with the same color.

      .. image:: graphs-scc/scc.png

    Let's try to get some intuition on how we could compute these SCC's.

    Imagine that we start a DFS at any red node, say 14. Then the set of nodes that will be visited is exaclty the set of red nodes and no other. So, in this case, we are lucky to visit exactly a SCC of the graph. If we mark the visited nodes as visited and then start from any green node, we will visit only the green nodes thus finding a new SCC. However, if after than we select a blue node, we will visit all the blue nodes together with the yellow nodes failing to find a new SCC. To avoid this problem we should have first done a DFS from a yellow node and only after from a blue node.

    This suggest that as long as we select a good order to perform DFS's, the set of nodes visited in each DFS corresponds to a SCC.

    The first thing that we need to observe is that the SCC's form a directed acyclic graph that we will refer to as SCC-DAG. By this we mean that we fuse each SCC into a single node and connect two fused nodes if they contain originally connected nodes.

      **Example:**

      The SCC-DAG corresponding to the previous graph is the following:

      .. image:: graphs-scc/sccCondensed.png

    The SCC-DAG must be acyclic becaus,e by definition, the SCC's are **maximal** strongly connected subgraph. If the SCC-DAG would contain a cycle then all nodes in the corresponding SCC's must have been in the same SCC in the original graph to begin with. Thus contradicting the fact that they resulted is distinct nodes in the condensed graph.

    By being acyclic it must have a topological order. Suppose for now that we know the topological order of the SCC's. Then, if we call any graph traversal algorithm on the ... TODO



environment: python3
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: Graphs - Strongly connected components
network_grading: false
problems:
    file:
        header: ''
        name: ''
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
