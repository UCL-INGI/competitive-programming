accessible: false
author: ''
context: |
    In this task we are going to learn how to compute the strongly connected components (SCC's) of a directed graph.

    A graph is said to be strongly connected if there exists at least one path between any pair of nodes in that subset.

    The strongly connected components of a graph are the maximal strongly connected subgraphs of that graph.

      **Example:**

      The following image show a graph with 4 SCC's. The nodes on the
      same SCC are colored with the same color.

      .. image:: graphs-scc/scc.png

    The first thing that we need to observe is that the SCC's form a directed acyclic graph that we will refer to as SCC-DAG. By this we mean that we fuse each SCC into a single node and connect two fused nodes if they contain originally connected nodes.

      **Example:**

      The SCC-DAG corresponding to the previous graph is the following:

      .. image:: graphs-scc/sccCondensed.png

    The SCC-DAG must be acyclic because by definition the SCC are maximal strongly connected subgraph. If the SCC-DAG would contains a cycle then all nodes in the corresponding SCC's must have been in the same SCC in the original graph to start with. Thus contradicting the fact that they result is distinct nodes in the condensed graph.
environment: python3
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: Graphs - Strongly connected components
network_grading: false
problems:
    file:
        header: ''
        name: ''
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
