accessible: true
author: Fran√ßois Aubry
context: |-
    The algorithm that we presented in the `maxflow task <graphs-maxflow>`_ is due to Jack Edmonds and Richard Karp and thus named Edmonds-Karp. The idea of finding paths in the residual graph was already known. Their contribution was to show that the algorithm runs in polynomial time if we use BFS to find the paths. This class of algorithms is called *augmenting path algorithms*.

    In general, it is easy to find an upper bound for the running time of an augmenting path algorithm:

    Whenever we are able to find a path, we push at least one new unit of flow. Therefore the total flow is strictly increasing so that we will perform at most :math:`F` pathfinding iterations, where :math:`F` is the maximum flow. Thus the complexity is :math:`O(F (V + E))` if we use an :math:`O(V + E)` algorithm to find the path such as DFS of BFS.

    |

    However, this is not very good news as we usually do not want the complexity to depend on the *value* of the answer since it could mean that even on a very small graph with, say :math:`F = 10^{10}`, the algorithm would take forever to run.

    We are going to show that if we use BFS to find the paths, the complexity will be :math:`O(V E^2)`.

    The remainder of this section is quite theoretical. So, if anything, the take-home messages are that:

    1. An augmenting path algorithm to compute the maximum flow will make at most :math:`F` path computations.
    2. Using BFS we can bound the number of path computations to :math:`O(VE)`.

    |


        **Theorem**

        During the execution of the algorithm, the distances of the
        nodes from the source never decrease.

    ----

    **PROOF**

    Assume that, after pushing flow on a path, the distance of some node was decreased. Denote by :math:`d_{bef}` the BFS distances and :math:`d_{aft}` the distances after.

    Let :math:`v` be the closest node to the source :math:`s` whose distance was decreased. That is :math:`v` such that:

    1. :math:`d_{aft}(s, v)` is minimum
    2. :math:`d_{aft}(s, v) < d_{bef}(s, v)`

    Let :math:`p = (s, \ldots, u, v)` be the shortest path from :math:`s` to :math:`v` on the residual graph *after* that we pushed the flow.

    |

    .. image:: graphs-MFruntime/flowTheory1.png

    |
    |

    **Recall that in the BFS we ignore edges of capacity 0.** Therefore it means that every edge of :math:`p` has positive capacity.

    By definition we have that

    .. math::

        d_{aft}(s, v) = d_{aft}(s, u) + 1

    Since :math:`v` is the closest node to :math:`s` whose distance decreased and :math:`u` is closer to :math:`s` than :math:`v`, we know that the distance of :math:`u` *did not decrease*. That is

    .. math::

        d_{bef}(s, u) \leq d_{aft}(s, u)

    We can now show that the capacity of (u, v) *before* was :math:`0`. If it was not, then it was considered by the BFS and thus, by the triangular inequality, :math:`d_{bef}(s, v) \leq d_{bef}(s, v) + 1`.

    |

    .. image:: graphs-MFruntime/flowTheory2.png

    |
    |

    Therefore

    .. math::

        d_{bef}(s, v) \leq d_{bef}(s, u) + 1 \leq d_{aft}(s, u) + 1 = d_{aft}(s, v)

    This would contradict the fact that the distance of :math:`v` was decreased.

    So we have the following situation:

    Before we pushed the flow, the capacity of :math:`(u, v)` was :math:`0` but after it was not, since it is an edge of :math:`p`. The only way in which this is possible is if flow was pushed on the reverse edge :math:`(v, u)`. Since we only push on shortest paths, we must have :math:`d_{bef}(s, u) = d_{bef}(s, v) + 1`. Hence

    .. math::

        d_{bef}(s, v) = d_{bef}(s, u) - 1 \leq d_{aft}(s, u) - 1 = d_{aft}(s, v) - 2

    So that, :math:`d_{bef}(s, v) \leq d_{aft}(s, v)` contradicting the fact that the distance to :math:`v` decreased.

    ----

    We are now going to use the fact that the distances never decrease to prove the time complexity of the algorithm.

        **Theorem**

        Edmonds-Karp algorithm performs at most :math:`O(VE)` BFS's, that is, calls to :code:`augmentFlowBFS`.

    ----

    **PROOF**

    We say that an edge is **critical** if we push flow on a path :math:`p` that contains it and that edge is a minimum capacity edge of that path. In other words, it is an edge that will have capacity :math:`0` after we push flow on :math:`p`.

    We are going to bound the number of times an edge can become critical. Let :math:`(u, v)` be any edge in the  graph. Denote by :math:`d` the BFS distances just before :math:`(u, v)` becomes critical. Since we find shortest paths to push flow we must have

    .. math::

        d(s, v) = d(s, u) + 1

    After we push the flow, since :math:`(u, v)` is critical, it will have capacity 0. Thus, for it to become critical again, we must first push flow on the reverse edge :math:`(v, u)`. Let :math:`d'` denote the distances just before this happens. Again, we must have

    .. math::

        d'(s, u) = d'(s, v) + 1

    Therefore, since distances cannot decrease, we have that :math:`d(s, v) \leq d'(s, v)` and thus

    .. math::

        d'(s, u) = d'(s, v) + 1 \geq d(s, v) + 1 = d(s, u) + 2

    We conclude that between two iterations where :math:`(u, v)` is critical **the distance from s to u must increase by at least 2**. Since the distances are at most :math:`V`, it means that each edge will become critical at most :math:`V / 2` times. As there are :math:`E` edges in total, the maximum number of times an edge can become critical overall is :math:`E V / 2 = O(VE)`. Since whenever we push flow on a path, that path must contain at least one critical edge, we conclude that the number of calls to :code:`augmentFlowBFS` is :math:`O(VE)`.

    ----

    Since the time complexity of BFS is :math:`O(V + E)` we have the following theorem for the time complexity of Edmond-Karp maximum flow algorithm.

    **Theorem**

        Edmonds-Karp algorithm runs in :math:`O(VE^2)`
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: Graphs - Maximum flow runtime
network_grading: false
order: 20
problems:
    read:
        choices:
        -   text: 'Yes'
            valid: true
        type: multiple_choice
        header: ''
        limit: 1
        name: Mark this section as read?
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
