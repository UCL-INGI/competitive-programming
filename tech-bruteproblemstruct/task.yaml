accessible: true
author: ''
context: |-
    In some problems it is possible to identify some structure in the optimal solution and then we can brute-force on the unknown parts of that that structure for find the optimal solution.

    To illustrate this we are going to solve problem E from BAC 2014.

    ----

    **Pickup and Delivery**

    A futuristic pickup and delivery company is considering the use of translocators in their business. A translocator is a device that allows the user to teleport himself. It has the two following functions:

    - Destroy the current portal if one exists and create one at you current location.

    - Teleport yourself to the portal. The portal is destroyed.

    Note that this means that there can only be one portal at a given time. Both these actions are instantaneous and take no time to execute.

    Given an **undirected** graph with up to :math:`50000` nodes representing road network, the location of the company headquarters H, the pickup location P and the delivery location D, they would like to know what is the minimum time it takes to go from H to P and then to D knowing that you have a translocator available.

    Note that you can use the translocator any number of times.

    **Example:**

    Suppose the map is given by the following graph.

    .. image:: tech-bruteproblemstruct/image.png

    The best solution is to go from :math:`H` to :math:`D` and drop the translocator. Then go to the pickup location :math:`P`, pickup the goods and then teleport yourself back to :math:`D`. The total time will be :math:`4`.

    ----

    **Solving the problem**

    Since the number of nodes can be up to :math:`50000`, it seems to indicate that there should be a linear time solution for this problem.

    We need to reason about the structure of the solution. What can we say about the usage of the translocator? Let's analyze the structure of an optimal solution when the translocator is used.

    Consider the following figure. It represents the structure of a path with one teleportation. Going from the headquarters :math:`H` to some node :math:`T` where we drop the teleporter then to some other node :math:`X` and from there, teleport back to :math:`T`.

    .. image:: tech-bruteproblemstruct/teleport1.png

    |

    (The wiggly arrows represent arbitrary paths)

    Clearly, the cycle :math:`(T, \ldots, X, T)` a waste of time if we did not pass by the pickup location :math:`P` because it achieved nothing, we just spent some more time to get back to :math:`P`.

    Therefore the path must have the form:

    .. image:: tech-bruteproblemstruct/teleport2.png

    |

    Here again, we can see a useless path: :math:`(P, \ldots, X, T)` is useless since if we wanted to go back to :math:`T`, we could have just teleported from :math:`P` to :math:`T` directly. Thus, so far, the optimal path will look like this:

    |

    .. image:: tech-bruteproblemstruct/teleport3.png

    |

    The only thing that remains is to go deliver the goods to :math:`D`.
    For the same reason as above, this path will never use a teleport as it would just create a cylce where no progress towards reaching :math:`D` is achieved:

    |

    .. image:: tech-bruteproblemstruct/teleport4.png

    |

    (We put in gray the parts of the solution that we already know are optimal)

    Therefore, we can conclude that an optimal solution that uses the teleporter will look as follows:

    |

    .. image:: tech-bruteproblemstruct/teleport5.png

    |

    In words, we go from the headquarter :math:`H` to some node :math:`T` where we drop the translocator. Then we go to pickup at :math:`P`, teleport back to :math:`T` and go to :math:`D` without teleporting.

    So we have the structure of the optimal and the only unknown is node :math:`T`. Thus one solution is to simply brute force over all possible values of :math:`T`, evaluate the cost of that solution and find the minimal one.
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: Techniques - Brute force on solution structure
network_grading: false
problems:
    file:
        type: file
        name: Pickup and Delivery
        header: |-
            Write a solution for the pickup an delivery problem described above.

            **Input**

            - One line with two integers n and m separated by a single space. The first one represents the number of locations and the second one the number of connections between them.

            - :math:`m` lines each with two integers :math:`u_i` and :math:`u_j` separated by a single space, indicating that there is a bidirectional road between locations :math:`u_i` and :math:`u_j`. You may assume that you will never be given the same road twice and that there exists at most one road between any two locations.

            - One line with three itegers :math:`H`, :math:`P` and :math:`D` giving the headquarters location, the pickup location and the delivery location, respectivey.


            All roads have the same length and take :math:`1` unit of time to traverse.


            **Constraints**

            * :math:`1 \leq n \leq 50000`
            * :math:`0 \leq m \leq (n^2 âˆ’ n) / 2`
            * :math:`0 \leq H, P, D < n`
            * :math:`S \neq H, S \neq D, P \neq D`
            * :math:`0 \leq u_i < n`
            * The graph is connected.

            **Output**

            A single line with the minimum travel time.

            **Sample Test Cases**

            `Sample input 1 <tech-bruteproblemstruct/1.in>`_

            `Sample output 1 <tech-bruteproblemstruct/1.ans>`_


            `Sample input 2 <tech-bruteproblemstruct/2.in>`_

            `Sample output 2 <tech-bruteproblemstruct/2.ans>`_
        allowed_exts:
        - .java
        - .cpp
        - .py
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
order: 35
