accessible: true
author: ''
context: |-
    We are going to see that we can very easily compute a topological order of a graph using DFS.

    As with most DFS derived algorithms, all we need to do is to reason about the DFS tree.

    We are going to argue that:

    **THEOREM**

        - In an *acyclic* graph, when a node becomes :math:`CLOSED` then
        all of its out-neighbors are already closed.

        Suppose that we are executing :code:`dfsVisit(u)`. Let consider
        any out-neighbors :math:`v`of :math:`u`and see why at the end of
        the :code:`for` loop, :math:`v` must be :math:`CLOSED`. We
        consider 3 cases depending on the state of :math:`v` when it was
        inspected in the loop:

            1. :math:`v` was :math:`CLOSED`: then it will also be closed
            at the end of the loop, there is nothing to prove.
            2. :math:`v` was :math:`UNV`: then we called
            :code:`dfsVisit(v)` and at the end of that call, :math:`v`
            became :math:`CLOSED`. Hence it will also be closed at the
            end of :code:`dfsVisit(u)`.
            3. :math:`v` was :math:`OPEN`: this means that :math:`(u,
            v)` is a *cycle edge* which is impossible since we assumed
            that the input graph was acyclic.

    **In short**: a node always becomes closed *after* all of its out-neighbors.

    In a topological order, we want a node to be placed anywhere *before* all of its out-neighbors.

    This means that, *the order in which the nodes are closed* must be, if one exists, the *reverse order of a topological order*.
environment: correctoz
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: 'Graphs - DFS: topological order'
network_grading: false
problems:
    read:
        name: Mark this section as read?
        choices:
        -   text: 'Yes'
            valid: true
        type: multiple_choice
        limit: 0
        header: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
