accessible: true
author: ''
context: |-
    We are going to see that we can very easily compute a topological order of a graph using DFS.

    As with most DFS derived algorithms, all we need to do is to reason about the DFS tree.

    We are going to argue that:

    - In an acyclic graph, when a node becomes :math:`CLOSED` then all of its out-neighbors are alread closed.

    When a node becomes :math:`CLOSED`, it means that we already performed :code:`dfsVisit` on each of its out-neighbors. Therefore, all of them must already also be :math:`CLOSED`.

    **In short**: a node always becomes closed *after* all of its out-neighbors.

    In a topological order, we want a node to be placed anywhere *before* all of its out-neighbors.

    This means that, *the order in which the nodes are closed* must be, if one exists, the *reverse order of a topological order*.
environment: correctoz
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: 'Graphs - DFS: topological order'
network_grading: false
problems:
    read:
        name: Mark this section as read?
        choices:
        -   text: 'Yes'
            valid: true
        type: multiple_choice
        limit: 0
        header: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
