accessible: false
author: ''
context: |-
    Another nice application of orientation is to check whether a point :math:`p` lies inside a convex polygon.

    A **convex polygon** is a simple polygon (with no self intersections) such that any line segment between two points inside of the polygon lies completly inside of it.

    |

    .. image:: geometry-pointinconvex/convex.png

    |

    The point will be inside a convex polygon if and only if it lies on the same side of the support line of each of the segments. That is, either it lies on the left of every line or it lines on the right of every line.

    |

    .. image:: geometry-pointinconvex/convex2.png

    |

    But we already know how to check whether a point lies on the right of left of a line defined by two points :math:`A` and :math:`B`. For each polygon segment :math:`\overline{AB}` we simply need to compute :math:`orient(A, B, P) = \vec{AB} \times \vec{AP}` and check that they all have the same sign (which indicates the side).

    |

    .. image:: geometry-pointinconvex/convex3.png

    |

    Note that the solution is not to whether the point lies to the **right** of each line but to check whether the point lies on **the same side** of each line. In the above example it will indeed be always on the right by this is because the polygon is oriented in a clockwise fashion. If it had been oriented in a counter-clockwise fashion, the point would have been on the left of each line as show in the following figure.

    |

    .. image:: geometry-pointinconvex/convex4.png

    |

    If the polygon vertices are :math:`p_1, p_2, \ldots, p_n` then we need to check that

    .. math::

        sorient(P, p_1, p_2) = sorient(P, p_2, p_3) = \ldots = sorient(P, p_{n - 1}, p_n) = sorient(P, p_n, p_1)
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    memory: '1000'
    time: '1000'
name: Geometry - Point in convex polygon
network_grading: false
problems:
    file:
        type: file
        allowed_exts:
        - .java
        - .cpp
        - .py
        name: Point in convex polygon
        header: |+
            You are given a convex polygon and a set of points. For each given point, check whether it lies inside the polygon, outside of it or on its the boundary.

            **Note:** This problem is not about making a smart data stucture to efficiently answer the queries. Checking the above condition in linear time is sufficient.

            **Input**

            - One line with one integer :math:`n` giving the number of vertices of the polygon.

            - :math:`n` lines each with two integers :math:`x_i` and :math:`y_i` giving the coordinates of the polygon vertices.

            - One line with one integer :math:`q` giving the number of query points.

            - :math:`q` lines each with two integers :math:`X_i` and :math:`Y_i` giving the coordinates of the query points.

            We guarantee that the input polygon is simple and convex.

            **Output**

            - :math:`q` lines, one for each query. If point :math:`(X_i, Y_i)` lines inside the polygon, the :math:`i`-th line should contain the word :code:`inside`. If it lies outside, it should contain :code:`outside`. Otherwise print :code:`boundary`.

            **Constraints**

            * :math:`3 \leq n \leq 1000`
            * :math:`1 \leq q \leq 1000`
            * :math:`0 \leq x_i, y_i, X_i, Y_i \leq 1000`

            **Sample Test Cases**

            `Sample input 1 <geometry-pointinconvex/1.in>`_

            `Sample output 1 <geometry-pointinconvex/1.ans>`_


            `Sample input 2 <geometry-pointinconvex/2.in>`_

            `Sample output 2 <geometry-pointinconvex/2.ans>`_

stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
