accessible: true
author: ''
context: |
    We are now going to see how we can solve mazes as the one show below. The goal is to find a path in the maze connecting the two blue points.

    |

    .. image:: graphs-maze/maze.png

    |

    We can simply use the path finding algorithm that implemented before. What we are going to learn here is to avoid representing the graph explicitly and execute the path finding algorithm directly on the maze.

    It is easy to represent the maze problem as a path finding problem on a graph. The graph has one node for each white cell in the maze. There is an edge between two nodes if the corresponding white cells are adjacent. The following figure illustrates this.

        **Example:**

        .. image:: graphs-maze/maze2.png

        |

        Notice that in this case graph, whenever there is an edge
        :math:`(u, v)` there reverse edge :math:`(v, u)` also exsits.
        This is because if we can go from cell :math:`x` to cell
        :math:`y` we can also move from cell :math:`y` to cell
        :math:`x`. In this case we say that the graph is
        **undirected**. Usually edges in undirected graphs are
        represented by segments as show in the right figure instead of
        having the two arrows. From now on this will be how we represent
        undirected graphs graphically.

    One way to solve this problem is to explicitly build the graph that corresponds to the maze and call :code:`findPath`. However we will not do this. Instead we will re-implement the algorithm to run over the maze without explicitly building the graph.

    We represent the maze as an ascii matrix :math:`maze` using '# for the walls, '.' for the white space, 'S' for the starting point and 'T' for the destination.

        **Example:**

        The above maze will be represented by:

        ``#########``

        ``#......S#``

        ``#.#.#####``

        ``#...#...#``

        ``#.#####.#``

        ``#.......#``

        ``#.#####.#``

        ``#.#T....#``

        ``#########``


    Nodes will be represented with array of two elements. So node :math:`u = (i, j)` is represented in code as :code:`int[] u = new int[] {i, j}`.

    When we are at node :math:`(i, j)` we know that our candidate neighbors are:

    .. math::

       (i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)

    From these we need to remove the ones that correspond to a wall. To easily iterate over them it is convinient to declare an array with the possible movement directions:

    .. code:: java

        static int[][] dir = new int[][] {
            new int[] {-1, 0},
            new int[] {1, 0},
            new int[] {0, -1},
            new int[] {0, 1}
        };

    Then to iterate over the neighbors of :math:`u = [u_i, u_j]` we can simply do:

    .. code:: java

        for(int[] d : dir) {
            int i = u[0] + d[0];
            int j = u[1] + d[1];
            if(maze[i][j] != '#') {
                // do something, the neighbor (i, j) of u
            }
        }

    Putting these pieces together to make a path finding algorithms is straighforward. As before, we need to be able to mark a node as visited. The simplest way to do this with when nodes are pairs of integers is to create a matrix such that :math:`visited[i][j]` is true if and only if node :math:`(i, j)` has been visited. Another change is that the parent will also be stored in an array such that :math:`parent[i][j]` contains the parent of node :math:`(i, j)`.

    .. code:: java

        static ArrayList<int[]> findPath(int n, int m, char[][] maze, int[] start, int[] end) {
            // initialize the queue and visited matrix
            Queue<int[]> Q = new LinkedList<>();
            Q.add(start);
            boolean[][] visited = new boolean[n][m];
            // initialize the parent array
            int[][][] parent = new int[n][m][];
            visited[start[0]][start[1]] = true;
            while(!Q.isEmpty()) {
                int[] u = Q.poll();
                // we are now processing node u
                for(int[] d : dir) {
                    int i = u[0] + d[0];
                    int j = u[1] + d[1];
                    // visit the edge from u to (i, j)
                    if(!visited[i][j] && maze[i][j] == '.') {
                        // node (i, j) has not yet been visited and is not a wall, add it
                        Q.add(new int[] {i, j});
                        visited[i][j] = true;
                        // set the parent of (i, j) to be u
                        parent[i][j] = u;
                    }
                }
            }
            // check whether a path exists
            if(!visited[end[0]][end[1]]) return null;
            // build the path by tracing back from t to s
            ArrayList<int[]> path = new ArrayList<>();
            int[] cur = end;
            // loop until we reach s (s is the only visited node with null parent)
            while(parent[cur[0]][cur[1]] != null) {
                path.add(cur);
                cur = parent[cur[0]][cur[1]];
            }
            // reverse and return the path
            Collections.reverse(path);
            return path;
        }
environment: pyjavacpp
evaluate: best
groups: false
limits:
    output: '100'
    time: '1000'
    memory: '1000'
name: Graphs - Solving a maze
network_grading: false
problems:
    file:
        allowed_exts:
        - .java
        - .cpp
        - .py
        name: Finding a path in a maze
        header: |+
            Put the piece together in order to be able to find a path in a maze.

            **Input**

            - One line with two integers :math:`n` and :math:`m` giving the number of rows and columns in the maze, respectively.

            - :math:`n` each with a string of length :math:`m` giving the rows of the maze. A '#' represents a wall, a '.' represents a white space, 'S' and 'T' represent the origin and destination, respectively.

            The positions are numbered starting from 0. There is a wall surrounding the maze as in the examples above.


            **Output**

            Output a sequence of lines each with two integers giving the position of path from S to T. The first integer represents the row and the second the column.

            There is always a path in the mazes provided.

            **Constraints**

            * :math:`1 \leq n, m \leq 1000`
            * Each characters belongs to '#.ST'.

            **Sample Test Cases**

            `Sample input 1 <graphs-maze/1.in>`_

            `Sample output 1 <graphs-maze/1.ans>`_


            `Sample input 2 <graphs-maze/2.in>`_

            `Sample output 2 <graphs-maze/2.ans>`_

        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
