accessible: true
author: François Aubry
context: ''
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: 'Graphs - Problem: Fire!'
network_grading: false
order: 9
problems:
    file:
        type: file
        name: Fire!
        header: |
            Adapted from: `UVa 11624 <https://uva.onlinejudge.org/external/115/11624.pdf>`_

            Joe works in a maze. Unfortunately, portions of the maze have caught on fire, and the owner of the maze neglected to create a fire escape plan.

            Your task is to help Joe escape the maze.

            Given Joe’s location in the maze and which squares of the maze are on fire, you must determine whether Joe can exit the maze before the fire reaches him, and how fast he can do it.

            Joe and the fire each move one square per minute, vertically or
            horizontally (not diagonally). The fire spreads all four directions from each square that is on fire. Joe may exit the maze from any square that borders the edge of the maze. Neither Joe nor the fire may enter a square that is occupied by a wall.

            **Example**

                The following image illustrates the first sample test case.
                Joe is represented in blue, the fire in red and the walls in
                gray. Joe can escape in 5 minutes as shown in the animation.

                .. image:: graphs-prob-fire/anim.gif


            **Input**

            The first line of the input contains two integers giving the number of rows :math:`n` and columns :math:`m` in the maze, respectively.

            Then follow :math:`n` lines each with a string on length :math:`m` giving the rows of the mazer. Each string is defined of the alphabet '#', '.', 'J' and 'F' each of the characters having the following meaning:

            - '#': a wall
            - '.': an empty space
            - 'J': the initial position of Joe
            - 'F': a position that is on fire at the start

            There will be exactly one 'J' in the maze.

            **Constraints**

            * :math:`1 \leq n, m \leq 1000`.

            **Output**

            For each test case, output a single line containing IMPOSSIBLE if Joe cannot exit the maze before the fire reaches him, or an integer giving the earliest time Joe can safely exit the maze, in minutes.

            Note that it still takes Joe one minute to go out of the maze once he is already at the border (see the first sample test case, the answer is 5 not 4).

            **Sample Test Cases**

            `Sample input 1 <graphs-prob-fire/1.in>`_

            `Sample output 1 <graphs-prob-fire/1.ans>`_


            `Sample input 2 <graphs-prob-fire/2.in>`_

            `Sample output 2 <graphs-prob-fire/2.ans>`_

            `Sample input 3 <graphs-prob-fire/3.in>`_

            `Sample output 3 <graphs-prob-fire/3.ans>`_
        allowed_exts:
        - .java
        - .cpp
        - .py
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
