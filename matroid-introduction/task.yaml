accessible: false
author: ''
context: |-
    A matroid :math:`M` is a pair :math:`(X, I)` where :math:`X` is a finite set (call **ground set**) and :math:`I` is a family of subsets of :math:`E` (called **independent sets**) with the following properties:

    *M1.* The empty set is independent:

    .. math::

        \emptyset \in I

    *M2.* A subset of an independent set is independent:

    .. math::

        \textrm{if } B \in I \textrm{ and } A \subseteq B \textrm{ then } A \in I

    *M3.* If :math:`A, B` are independent and :math:`|A| = |B| + 1`, then there is an element :math:`x \in A \setminus B` such that :math:`B \cup \{x\}` is independent:

    .. math::

        \textrm{if } A, B \in I \textrm{ and } |A| \subseteq |B| + 1 \textrm{ then there exists } x \in A \setminus B \textrm{ such that } B \cup \{x\} \in I

    All of this might seem very abstract so lets give an example a matroid.

    ----

    **Graphic matroid**

    Let :math:`G` be a graph with edge set :math:`E`.

    Let's say that a subset of edges of :math:`G` is independent if it contains no cycles (i.e. the subset forms a forest).

    We are going to see that this forms a matroid over :math:`E`. For this we need to check that properties M1, M2 and M3 above hold.

    **1:**


    Clearly, if we select :math:`0` edges, we get a subgraph that contains no cycles.

    **2:**


    Let :math:`F \subseteq E` be a subset of edges that has no cycles. Then, it is also clear that any subset of :math:`F` also contains no cycles.

    **3:**

    Let :math:`F_1, F_2` be acyclic subgraphs (forests) such that :math:`|F_1| = |F_2| + 1`. We need to prove that there exists an edge :math:`(u, v)` that is in :math:`F_1` but not in :math:`F_2` such that if we add it to :math:`F_2` it remains acyclic.

    Suppose that :math:`F_2` has :math:`k` connected components and denote the number of edges in each of them by :math:`e_1, \ldots, e_k`.

    We need to prove that some edge of :math:`F_1` connects two nodes that are not in the same connected component of :math:`F_2`.

    If this was not the case, the all edges of :math:`F_1` would connect only nodes that are in the same connected components of :math:`F_2`. But imagine yourself trying to fit :math:`|F_2| + 1` edges into the
    connected components of :math:`F_2`. Since each component must remain a tree, the number of edges of :math:`F_1` that you can in into each component remains the same. That is, you can only fit at most :math:`e_1` edges in the frist, :math:`e_2` in the seconds and so on. Thus by the end, when you filled all components you have put a total of :math:`e_1 + e_2 + \ldots + e_k = |F_2| = |F_1| - 1` edges. This means that you have one edge left to add. But there is no more space within the components. Adding it anywhere within a component would create a cycle. Therefore, it must connect two nodes from distinct components.

    |

    .. image:: matroid-introduction/matroid1.png

    |

    This proves property (M3) If we select edge :math:`(u, v) \in F_1 \setminus F_2` such that :math:`u` and :math:`v` belong to two different connected components of :math:`F_2`, whne we add it to :math:`F_2`, it will remain acyclic (and thus independent).

    This matroid is known as the *graphic matroid*.

    ----

    Ok so we have just seen an example of a matroid. So what?

    Well it turns out that several problem related to matroids are somewhat generic algorithms for solving them. We will start with the following simple problem.

    An independent set of a matroid is said to be **maximal** it is not properly contained in any other independent set. Clearly, by property 3., all maximal independent sets must have the same size:

    If :math:`A, B` are both maximal but :math:`|A| > |B|` then we can find :math:`x \in A \setminus B` such that :math:`B' = B \cup \{x\}` is independent. Therefore :math:`B` is not maximal since it is properly containend in :math:`B'`.

        **Minimum weight independent set on a matroid**

        Let :math:`(X, I)` be a matroid and :math:`w : X \rightarrow \mathbb{R}` a weight function on :math:`X`. Find a maximal independent set :math:`Y \in I` of minimum weight, that is, minimizing

        .. math::

            w(Y) = \sum_{y \in Y} w(y)

    We will see that the following generic algorithm is *guaranteed* to find an optimal solution to this problem for *any* matroid :math:`(X, I)` and weight function :math:`w`.

        **Greedy algorithm for matroids**

        *G1.* Sort :math:`X` by :math:`w` so that :math:`w(x_1) \leq w(x_2) \leq \ldots \leq w_{|X|}`

        *G2.* Initialize :math:`A = \emptyset`

        *G3.* For :math:`i = 1, \ldots, |X|`, if :math:`A \cup \{x_i\}` is independent, add :math:`x_i` to :math:`A`

        *G4.* Output :math:`A`

    Notice that the only hard part in the above algorithms might be checking the independence in line (G3). Clearly this is problem dependent and will change from one matroid to another.

    Let's see what the minimum weight independent set problem translates to for the graphic matroid and also what how to implement the independence check.

    ----

    **Min-weight independent set on the graphic matroid**

    The first step is to identify what are the maximal independent sets on matroids.

    Independent sets on the graphic matroid correspond to acyclic subgraphs. Therefore maximal independent sets correspond to acyclic subgraphs of maximum size, also know as, *spanning trees*.

    Thus the problem:

        Find a maximum independent set of minimum weight

    Translates to:

        Find a spanning tree of minimum weight

    So in the end all this abstract concepts translated into a well know problem that we already solved. Furthermore, we are going to see that the algorithm translates into **Kruskal's algorithm**:

        1. Sort :math:`E` by :math:`w` so that :math:`w(e_1) \leq w(x_2) \leq \ldots \leq w_{|E|}`

        2. Initialize :math:`T = \emptyset`

        3. For :math:`i = 1, \ldots, |E|`, if :math:`T \cup \{e_i\}` is acyclic, add :math:`e_i` to :math:`T`

        4. Output :math:`T`

    ----

    So far, all of this might see a bit pointless. After all, we already knew how to solve the minimum spanning tree problem. But you will see that matroids will allow us to solve a lot of new (very hard) problems.

    Just for completeness, we are going to prove that the general greedy algorithm for matroids is optimal. We need to:

    1. prove that the output set is maximal
    2. prove that it has minimal weight

    **1:**

    Write :math:`X = \{x_1, \ldots x_k\}` with :math:`w(x_1) \leq \ldots \leq w(x_k)`.

    Clearly the algorithm outputs an independent set by construction: :math:`\emptyset` is independent and we only add elements if the result is independent. Assume that the algorithm outputs a non maximal set :math:`A`. Let :math:`B \in I` be any maximal set. By property (M3) we have that there exists :math:`x_i \in B \setminus A` such that :math:`A \cup \{x_i\}` is independent. But this is impossible or otherwise :math:`x_i` would have been added to :math:`A` at the :math:`i`-th line (G3) of the algorithm.


    **2:**

    Assume that there exists an independent set :math:`B \in I` such that :math:`w(B) < w(A)`. Write :math:`A = \{a_1, \ldots, a_n\}` and :math:`B = \{b_1, \ldots, b_n\}` with :math:`w(a_1) < \ldots < w(a_n)` and :math:`w(b_1) < \ldots < w(b_n)`.

    Since :math:`w(B) < w(A)`, there must exist some :math:`i` such that :math:`w(b_i) < w(a_i)`.

    Let :math:`A' = \{a_1, \ldots, a_{i - 1} \}` and :math:`B' = \{b_1, \ldots, b_i\}`. By property M2 of matroids, both :math:`A'` and :math:`B'` are independent sets. Therefore, by property M3, since :math:`|B'| = |A'| + 1`, there is some element :math:`b_j \in B' \setminus A'` such that :math:`A' \cup \{b_j\}` is independent.

    But, since :math:`j \leq i` we have :math:`w(b_j) \leq w(b_i) < w(a_i)`. Therefore element :math:`b_j` would have been selected instead of element :math:`a_i` at the :math:`i`-th step of the algorithm.
environment: dafny
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: Matroids - Introduction
network_grading: false
problems: {}
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
