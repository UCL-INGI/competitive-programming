accessible: false
author: ''
context: |-
    In this task we will quickly extended our solution for cumulative 1D sums to cumulative 2D sums. The goal is to be able to answer queries over a fixed :math:`n \times m` matrix :math:`A` which input four integers :math:`0 \leq i_1 \leq i_2 < n`, :math:`0 \leq j_1 \leq j_2 < m` and output the sum of the elements in rows :math:`i_1` to :math:`i_2` and columns :math:`j_1` to :math:`j_2`.

    .. image:: dp-cumsum-2d/acsum2D-2.png

    The idea is very similar to the one we developed for the one dimensional case.

    Define :math:`S[i_1][j_1][i_2][j_2]` such that

    .. math::

      S[i_1][j_1][i_2][j_2] = \sum_{i = i_1}^{i_2} \sum_{j = j_1}^{j_2} A[i][j]

    As before, computing this matrix using the defintion would weild a very slow preprocessing algorithm. To reduce the number of entries that need to be computed to :math:`O(n^2)` we will fix :math:`i_1 = j_1 = 0` and express :math:`S[i_1][j_1][i_2][j_2]` as a function of such entries.

    It is easy to see that if :math:`i_1, j_1 > 0` then

    .. math::

       S[i_1][j_1][i_2][j_2] = S[0][0][i_2][j_2] - S[0][0][i_1 - 1][j_2] - S[0][0][i_2][j_1 - 1] + S[0][0][i_1 - 1][j_1 - 1]

    The following figure illustrates this:

    .. image:: dp-cumsum-2d/acsum2D.png

    In general some of these terms might be 0 depending on whether :math:`i_1` and :math:`j_1` are non-zero.

    As for the 1D case, we simplify the notatio by dropping the two first indexes and writting :math:`s[i][j] = S[0][0][i][j]`. To pre-compute the :math:`s[i][j]` we can use an analogous reasoning as the one we did above and get

    .. math::

       s[i][j] = A[i][j] + s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1]

    as illustrated in the following picture:

    .. image:: dp-cumsum-2d/acsum2D-3.png

    If :math:`i` or :math:`j` are 0 then the terms that would yield negative indexes should be treated as 0 since their rectangles are not defined so there is nothing to add or subtract. Taking this into accound we get

    .. math::

      s[i][j] =
      \begin{cases}
        A[0][0] & \quad \text{if } i = j = 0 \\
        A[0][j] + s[0][j - 1] & \quad \text{if } i = 0 \text{ and } j > 0 \\
        A[i][0] + s[i - 1][0] & \quad \text{if } i > 0 \text{ and } j = 0 \\
        A[i][j] + s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] & \quad \text{if } i > 0 \text{ and } j > 0 \\
      \end{cases}
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: 'DP - Data structures: 2D cumulative sums'
network_grading: false
order: 32
problems:
    file:
        name: 2D cumulative sums
        header: |
            You will be given an :math:`n \times m` matrix :math:`A` and a list of :math:`q` tuples :math:`(i_1, j_1, i_2, j_2)_1, \ldots, (i_1, j_1, i_2, j_2)_q`. For each of them you have to output the sum of values of :math:`A` in that range.

            **Input**

            - One line with two integers :math:`n` and :math:`m` giving the size of the matrix.

            - :math:`n` lines each with :math:`m` integers giving the values :math:`A[i][j]` of :math:`A`.

            - One line with a single integer :math:`q` giving the number of ranges.

            - :math:`q` lines each with four integers :math:`i_1, j_1, i_2, j_2` each range.

            **Constraints**

            * :math:`1 \leq n, m \leq 1000`
            * :math:`-10000 \leq a_i \leq 10000`
            * :math:`1 \leq q \leq 10^5`
            * :math:`0 \leq i_1 \leq i_2 \leq n - 1`
            * :math:`0 \leq j_1 \leq j_2 \leq m - 1`

            **Output**

            :math:`q` lines, each with a single integers giving the sum of the values of :math:`A` over the corresponding range.

            **Sample Test Cases**

            `Sample input 1 <dp-cumsum-2d/1.in>`_

            `Sample output 1 <dp-cumsum-2d/1.ans>`_


            `Sample input 2 <dp-cumsum-2d/2.in>`_

            `Sample output 2 <dp-cumsum-2d/2.ans>`_
        allowed_exts:
        - .java
        - .cpp
        - .py
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
