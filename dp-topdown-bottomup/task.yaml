accessible: false
author: ''
context: |-
    The solution that we developed for the Knpasack problem where we solve our problem with a recursive function and memoize the results is called **top-down** dynamic programming.

    There is another way to implement a DP algorithm which is called **bottom-up**. In most cases the choice of which one you use should be based on the one you are more comfortable writing. Personally I feel that top-down DP is more intuitive but this varies from one person to another.

    You should most both ways and be able to switch between them easily as in some cases one is more efficient than the other. We will see examples of this in more advanced DP problems.

    For now let's explain what bottom-up DP consists of and write such a solution for the Knapsack problem.

    In our previous solution we defined the DP subproblems

    In the top-down DP solution we defined the states and subproblems starting from the problem that we want to solve. That is, having all objects available and a knapsack of capacity :math:`C`.

    In bottom-up DP we will write an iterative solution to compute the value of *every* state. We will start from the smallest subproblems and iteratively increase the size and compute the new solutions from the ones we already know. This means that we will have to redefine the subproblems. Then we will need to find how the solution of the problem changes when a new object becomes available.

    We define the subproblems as follows:

      :math:`dp(i, c)` is the maximum value we can obtain by
      selecting a subset of the objects :math:`0, 1 \ldots, i`
      from a knapsack of capacity :math:`c`.

    Notice that now when we increase :math:`i` we are considering more objects whereas in the previous definitions it would consider less objects.

    The easy subproblems correspond to states where :math:`i = 0`,, that is, we only have one object. In this case we either get value :math:`v_0` if object fits the knapsack or 0 otherwise.

    .. math::

       dp(0, c) =
       \begin{cases}
       v_0       & \quad \text{if $w_0 \leq c$}\\
       0 & \quad \text{otherwise}
      \end{cases}

    Now we need to express the solution of :math:`dp(i, c)` with the values of smaller subproblems. In this case, subproblems :math:`(i',  c')` where :math:`i' \leq i` and :math:`c' \leq c`.

    The recurrence relation will naturally be very similar to the previous one. Again, we have two choices: either we take object :math:`i` or we skip it.

    - *If we take it* then we will take the remaining items :math:`0, 1, \ldots, i - 1` in the best way possible but in a knapsack of capacity :math:`c - w_i`.
    - *If we don't take it* then we will take the remaining items in the best way possible in a knapsack of capacity :math:`c`.

    .. math::

       dp(i, c) = \max
       \begin{cases}
       dp(i - 1, c - w_i)       & \quad \text{take item $i$}\\
       dp(i - 1, c) & \quad \text{skip item $i$}
      \end{cases}

    We need to be careful with the fact that we can only take item :math:`i` if it fits the knapsack. Otherwise :math:`c - w_i < 0` and :math:`dp(i - 1, c - w_i)` is undefined. We can treat these cases to have value :math:`-\infty` so they are ignored in the maximization.

    In bottom-up DP we usually compute the values by creating a matrix that with one entry per subproblem and then iterate over the states in order and apply use the recurrence relation to compute the values. The following code gives a possible implementation.

    .. code:: java

      static int knapsack(int n, int C, int[] v, int [] w) {
        int[][] dp = new int[n][C + 1];
        // initialize the base cases
        for(int c = 0; c < C; c++) {
          dp[0][c] = c - w[0] >= 0 ? v[0] : 0;
        }
        // loop and apply recurrence
        for(int i = 1; i < n; i++) {
          for(int c = 0; c < C; c++) {
            int take = c - w[i] >= 0 ? v[i] + dp[i - 1][c - w[i]] : Integer.MIN_VALUE;
            int skip = dp[i - 1][c];
            dp[i][c] = Math.max(take, skip);
          }
        }
        return dp[n - 1][C];
      }
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    memory: '1000'
    time: '1000'
name: DP - Top down VS Bottom up
network_grading: false
order: 13
problems:
    file:
        allowed_exts:
        - .java
        - .cpp
        - .py
        name: Knapsack (same problem as before)
        header: |
            Put all the pieces that we discussed above together and write a bottom-up solution for the Knapsack problem (the task will not check whether your solution is a bottom-up solution).

            **Input**

            - One line with two integers :math:`C` and :math:`n` giving the knapsack capacity and the number of items respectively.

            - :math:`n` lines each with two integers :math:`w` and :math:`v` giving the weights and the values of each of the items.

            **Output**

            A single line with an integer giving the maximum value that can be achieve by taking a subset of the items with total weight at most :math:`C`.

            **Constraints**

            * :math:`1 \leq C, n, v, w \leq 2000`

            **Sample Test Cases**

            `Sample input 1 <dp-knapsack/1.in>`_

            `Sample output 1 <dp-knapsack/1.ans>`_


            `Sample input 2 <dp-knapsack/2.in>`_

            `Sample output 2 <dp-knapsack/2.ans>`_
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
