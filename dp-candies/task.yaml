accessible: true
author: ''
context: |
    In this task we will an example of parameter decution in DP.

    Broadly speaking, parameter reduction consists of eliminating some parameter in a DP formulation that can be decuded from the others.

    To illustrate this, consider the following simple problem. You have :math:`n` candies to give to 3 kids. Each candy as a value :math:`w_i` that represents how good it is. All kids agree on these values.
    The goal is to split the candies amongst the kinds so that the difference between the maximum total value and the minimum total value given to a kid is minimum.

    More formally, is :math:`V_i` is the sum of the values of the candies given to the :math:`i`-th kid then the goal is to minimize
    the balance of the candy distribution, that is, minimize :math:`max(V_1, V_2, V_3) - min(V_1, V_2, V_3)`.

      **Example**

      Consider the 6 candies :math:`c_1, c_2, c_3, c_4, c_5, c_6` shown
      in the picture below:

      .. image:: dp-candies/candy.png

      If we give :math:`c_1, c_2` to the first kid, :math:`c_3, c_4` to
      the second kid and :math:`c_5, c_6` to the third kid, we have
      :math:`v_1 = 4 + 3 = 7`, :math:`v_2 = 4 + 3 = 5` and :math:`v_3 =
      4 + 3 = 6`. So in this case the balance of the candy distribuiton
      is :math:`max(v_1, v_2, v_3) - min(v_1, v_2, v_3) = max(7, 5, 6) - min(7, 5, 6) = 7 - 5 = 2`.

      But we can do better! We can instead give :math:`c_1, c_3` to the
      first kid, :math:`c_2, c_4` to the second kid and :math:`c_5, c_6`
      to the third kid. In this case :math:`v_1 = v_2 = v_3 = 6` so the
      balance is 0.

    This problem is very naturally formulated as a top-down DP. For each candy we have 3 possible options: give to either the first, the second or the third kid. As with the Knapsack problem, the order in which we make the decisions does not matter and thus as far as the candies are concerned, we only need to keep track of the index :math:`i` of the next candy for which we are going to make a decision. On the other hand, only after making all the decisions we can evaluate the balance of the candy distribution. Therefore, we also need to keep track of the total value given to each of the kids.

    Thus a possible state can be a tuple :math:`(i, v_1, v_2, v_3)` meaning that we have already given candies :math:`0, \ldots, i - 1` making a total values of the :math:`i`-th kid equal to :math:`v_i`.

    We can thus define the subproblems as:

      :math:`dp(i, v_1, v_2, v_3)` is the minimum difference that we can
      achieve by giving canides :math:`i, i + 1, \ldots, n - 1` knowing
      that the :math:`k`-th kid has already value :math:`v_k`.

    The original problem is clearly :math:`dp(0, 0, 0, 0)`. The recurrence relation easily follows from the three possible actions that we can perform for each candy:

    .. math::

      dp(i, v_1, v_2, v_3) = \min
      \begin{cases}
        dp(i + 1, v_1 + w_i, v_2, v_3) & \quad \text{give to kid 1} \\
        dp(i + 1, v_1, v_2 + w_i, v_3) & \quad \text{give to kid 2} \\
        dp(i + 1, v_1, v_2, v_3 + w_i) & \quad \text{give to kid 3} \\
      \end{cases}

    When :math:`i = n` we have finshed distributing the candies. We can the define:

    .. math::

      dp(n, v_1, v_2, v_3) = \max(v_1, v_2, v_3) - \min(v_1, v_2, v_3)

    The number of states in this solution is :math:`O(n S^3)` where :math:`S` is the sum of all the values of the candies. Since each state takes constant time to evaluated, that will be the runtime of this solution.

    By now it should be easy to write the code corresponding to this solution. **If you tried to do it** and you still have trouble, you can find it `here <dp-candies/Candy3Kids.java>`_.

    Our goal in this task is to reduce the state space from tuples :math:`(i, v_1, v_2, v_3)` to tuples :math:`(i, v_1, v_2)`. This will be possible because we can decude :math:`v_3` from :math:`v_1, v_2`. We only need the value of :math:`v_3` in the end, when all candies have been distributed. At that moment, we know that :math:`v_1 + v_2 + v_3 = S`, the total value of the candies. Therefore, :math:`v_3 = S - v_1 - v_2`.

    We can redefine our subproblems as follows:

      :math:`dp(i, v_1, v_2)` is the minimum difference that we can
      achieve by giving canides :math:`i, i + 1, \ldots, n - 1` knowing
      that the first kid has value :math:`v_1` and the second has
      :math:`v_2`.

    The recurrence is almost the same as before, except that we drop the last parameter:

    .. math::

      dp(i, v_1, v_2) = \min
      \begin{cases}
        dp(i + 1, v_1 + w_i, v_2) & \quad \text{give to kid 1} \\
        dp(i + 1, v_1, v_2 + w_i) & \quad \text{give to kid 2} \\
        dp(i + 1, v_1, v_2) & \quad \text{give to kid 3} \\
      \end{cases}

    When :math:`i = n` we use the fact that :math:`v_3 = S - v_1 - v_2` to evaluate the balance:

    .. math::

      dp(n, v_1, v_2) = \max(v_1, v_2, S - v_1 - v_2) - \min(v_1, v_2, S - v_1 - v_2)
environment: pyjavacpp
evaluate: best
groups: false
limits:
    time: '30'
    output: '2'
    memory: '100'
name: DP - Candy problem, parameter decution
network_grading: false
problems:
    file:
        name: Candies for 3 kids
        type: file
        header: |-
            Write the code for the DP solution with reduced state space.

            **Input**

            - One line with a single integer :math:`n` giving the number of candies.

            - One line with :math:`n` integers separated by single spaces giving the values :math:`v_i` of each of the candies.

            **Output**

            A single line with an integer giving the minimum difference that can be achieved as described above.

            **Constraints**

            * :math:`1 \leq n \leq 50`
            * :math:`1 \leq v_i \leq 10`

            **Sample Test Cases**

            `Sample input 1 <dp-candies/1.in>`_

            `Sample output 1 <dp-candies/1.ans>`_


            `Sample input 2 <dp-candies/2.in>`_

            `Sample output 2 <dp-candies/2.ans>`_
        allowed_exts:
        - .java
        - .cpp
        - .py
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
