accessible: false
author: ''
context: |
    Imagine that you have :math:`n` tasks :math:`T` to schedule on a single processor. Each task takes exactly :math:`1` unit of time to complete. However, each task has a positive deadline :math:`d_i` and a positive cost :math:`c_i` that is paid for each task that finishes after its deadline. It does not matter how late the task is finished, you always pay the same cost as long as it is delayed.

    ----

    **Example:**

    Imagine that we have :math:`n = 7` tasks with the following deadlines and costs:

    |

    .. image:: matroid-task-scheduling/matroid3.png

    |

    Consider the following schedule:

    |

    .. image:: matroid-task-scheduling/matroid2.png

    |

    Each box represents a task a the time below represent the time at which it was scheduled. For instance, task :math:`3` was sheduled at time :math:`1` and task :math:`4` at time :math:`4`. On the top we show the deadlines of the tasks, for instance, tasks :math:`1, 3, 4` and :math:`6` all have dealine :math:`4`.

    A task is represented in green if it is scheduled before its deadline and in red otherwise. The total cost of a schedule is the sum of the costs of the tasks in red. In this case it is:

    .. math::

        c_5 + c_4 + c_2 + c_6 = 3 + 4 + 6 + 2 = 15

    ----

    Define a subset of tasks to be *independent* if there exists a schedule for these tasks such that they are all finished before their dealines.

    We are going to prove that :math:`(T, I)` is a matroid, where :math:`I` is the set of all subsets of independent tasks, as defined above.

    Let :math:`A` be a set of tasks. Denote by :math:`N(t, A)` the number of tasks in :math:`A` with deadline at most :math:`t`. For instance, in the above example :math:`N(4, \{2, 4, 7\}) = 2` since tasks :math:`2` and :math:`4` have deadline :math:`\leq 4`.
environment: dafny
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: 'Matroids - Problem: Scheduling unit-time tasks on a single processor'
network_grading: false
problems: {}
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
