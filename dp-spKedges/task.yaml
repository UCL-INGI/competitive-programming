accessible: true
author: ''
context: |-
    In the previous task, we say a DP formulation for the shortest path problem with positive edge weights :math:`w` from a given source node :math:`s`:

    .. math::

        dp(s) = 0

    and for :math:`v \neq s`

    .. math::

        dp(v) = \min_{(u, v) \in E} dp(u) + w(u, v)

    The state graph is the same as the input graph and so this formulation will work if and only if the input graph is acyclic.

    So what can we do if the input graph contains cycles, is it still possible to solve it with dynamic programming? *YES*. But we need to change the formulation so that the resulting state graph is acyclic.

    Doing so requires some imagination and is problem dependent. However there are some general tricks.

    Suppose that you have a formulation with states :math:`s \in S`.
    Imagine that you add a parameter :math:`i` to the formulation and manage to make sure that each state :math:`(s, i)` **only depends** on states :math:`(s, j)` with :math:`j < i`. Then your new state graph is clearly acyclic since any path on it

    .. math::

        (s_1, i_1), (s_2, i_2), \ldots, (s_k, i_k)

    must has have a strictly increasing :math:`i` coordinates

    .. math::

        i_1 < i_2 < \ldots < i_k

    This might seem a bit abstract so let's see a concrete example with the shortest path problem.

    Define a new state :math:`(v, i)` with the following subproblem definition:

        :math:`dp(v, i)` equals the length of the shortest path from :math:`s` to :math:`v` that traverses at most :math:`i` edges.

    How to the subproblems relate to each other? To reach node :math:`i` using at most :math:`i` edges, we have two possibilities:

    1. We reach some neighbor :math:`u` of :math:`v` using at most :math:`i - 1` edges and then traverse edge :math:`(u, v)`

    2. We reach :math:`v` using at most :math:`i - 1` edges.

    Mathematically, this means that

    .. math::

      dp(v, i) = \min
      \begin{cases}
        \min \left\{ dp(u, i - 1) + w(u, v) \mid (u, v) \in E \right\} \\
        dp(v, i - 1)
      \end{cases}

    The base case is when :math:`i = 0`. In this case we only use paths with :math:`0` edges the only node that is reachable from the source :math:`s` is itself. If :math:`d(v, i)` is not defined, that is, the path of at most :math:`i` edges from :math:`s` to :math:`v` exists, we define :math:`d(v, i) = \infty`. In particular, it means that we initialize :math:`d(v, 0) = \infty` for each :math:`v \neq s`.


    With this formulation we can now solve the following problem:

        Given a weighted graph :math:`G` and a source :math:`s`, what is the shortest path from :math:`s` to :math:`v` using at most :math:`i` edges?

    Notice that with positive edge weights, any shortest path uses at most :math:`|V| - 1` edges (such a shortest path cannot have cycles). This means that we only need to compute the answer for states until :math:`i = |V| - 1`. The answer to the shortest path problem from :math:`s` to :math:`v` will therefore be :math:`dp(v, |V| - 1)`.

    What did we lose by extending the space state? We lost efficiency, now there are :math:`O(|V|^2)` states.

    It should be easy now to implement this ideas. Simply create a matrix to store the values of :math:`dp(v, i)` and compute them in increasing order of :math:`i` using the above relation.

    Since for each :math:`i = 0, \ldots, |V| - 1` we need to iterate over the graph, the total runtime will be :math:`O(|V| (|V| + |E|))`. This is equal to :math:`O(|V| |E|)` for any connected graph.
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: 'DP - Shortest paths: Acyclic formulation'
network_grading: false
order: 22
problems:
    file:
        type: file
        name: Alice is afraid of flying
        header: |-
            Alice wants to travel from her home country :math:`A` to her dream destination :math:`B`. There are several flights available connecting the cities in the world each with a certain price :math:`p`. She does not really like to fly, she particularly really hates the takeoff. Therefore, so she would like to go travel without having to fly more than :math:`k` times.

            Can you help her find the cheapest way to fly from :math:`A` to :math:`B` without flying more than :math:`k` times?

            **Input**

            - One line with four integers :math:`n`, :math:`m`, :math:`A`, :math:`B` and :math:`k` giving the number of cities, the number of flights connecting pairs of cities, her home city, her dream destination and the maximum number of flights that she can bear.

            - :math:`m` lines each with with three integers :math:`a, b` and :math:`p` giving that she can fly betweens cities :math:`a` and :math:`b` at cost :math:`p`. Note that flights are bidirectional.

            The cities are represented by numbers from 0 to :math:`n - 1`. You can assume that it is possible to travel (possibly indirectly) between any to pairs of cities.

            **Output**

            A single integer with the minimum cost for traveling from :math:`A` to :math:`B` with at most :math:`k` flights.

            If it is impossible for Alice to reach her destination in at most :math:`k` flights, print *impossible*.

            **Constraints**

            * :math:`2 \leq n \leq 1000`
            * :math:`1 \leq m \leq 10000`
            * :math:`0 \leq A, B < n`
            * :math:`1 \leq k < n`
            * :math:`0 \leq p \leq 1000`

            **Sample Test Cases**

            `Sample input 1 <dp-spKedges/1.in>`_

            `Sample output 1 <dp-spKedges/1.ans>`_


            `Sample input 2 <dp-spKedges/2.in>`_

            `Sample output 2 <dp-spKedges/2.ans>`_
        allowed_exts:
        - .java
        - .cpp
        - .py
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
