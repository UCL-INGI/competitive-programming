accessible: true
author: Aubry Fran√ßois
context: |-
    In this task you will learn the basics of Dynamic Programming (DP for short).

    The *maximum sum subarray problem* is the following:

    Given an array :math:`a` with :math:`n` integers, we want to find a subarray of :math:`a` such that the sum of its elements is as large as possible.

    Example:

    If :math:`a = [4, -2, -3, 4, -1, -2, 1, 5, -1]` then the maximum subarray of :math:`a` is :math:`[4, -1, -2, 1, 5]` with sum
    :math:`4 - 1 - 2 + 1 + 5 = 7`.

    In this first example we will develop an :math:`O(n)` algorithm for this problem.
environment: python3
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: Dynamic Programming - Introduction
network_grading: false
problems:
    dp1-maxarraysum-1:
        allowed_exts:
        - .java
        header: In this first subproblem we solve a slightly modified version of the
            problem.
        name: Maximum sum subarray sum ending at
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
