accessible: true
author: Aubry Fran√ßois
context: |+
    The **maximum sum subarray problem** is the following:

    Given an array :math:`a` with :math:`n` integers, we want to find a subarray of :math:`a` such that the sum of its elements is as large as possible.

    Recall that subarray is a continuous range, you cannot skip some elements. Otherwise the problem would be trivial as one could just pick all positive elements.

    Example:

    .. image:: dp-intro/example_maxsubarray.png

    The goal of this task is to develop an :math:`O(n)` algorithm for this problem.

environment: python3
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: DP - Maximum sum subarray
network_grading: false
order: 1
problems:
    dp1-maxarraysum-1:
        allowed_exts:
        - .java
        header: In this first subproblem we solve a slightly modified version of the
            problem.
        name: Maximum sum subarray sum ending at
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
