accessible: true
author: Aubry Fran√ßois
context: |-
    The **maximum sum subarray problem** is the following:

    Given an array :math:`a` with :math:`n` integers, we want to find a subarray of :math:`a` such that the sum of its elements is as large as possible.

    Recall that subarray is a continuous range, you cannot skip some elements. Otherwise the problem would be trivial as one could just pick all positive elements.

    **Example:**

    .. image:: dp-intro/maxsubarray.png

    The goal of this task is to develop an :math:`O(n)` algorithm for this problem.


    In order to do so, we will reason about the structure of the solution. All of these observation are quite obvious but they allow
    slightly modify the problem in order to make it easier to solve.

    Observations:

    - The maximum sum subarray will end at some element :math:`a[i]`
    - The reamining subarray is either empty, or it is a maximum sum subarray ending at element :math:`a[i - 1]`

    The next figure illustrates this.

    .. image:: dp-intro/maxsubarray2.png

    Make sure you are convinced of this before you continue to read.
environment: java8scala
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: DP - Maximum sum subarray
network_grading: false
order: 1
problems:
    dp1-maxarraysum-1:
        allowed_exts:
        - .java
        header: In this first subproblem we solve a slightly modified version of the
            problem.
        name: Maximum sum subarray sum ending at
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
