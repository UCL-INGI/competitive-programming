accessible: false
author: ''
context: |-
    In this task we are going to see two simple applications of binary search related to square root computations.

    The first problem that we are going to solve is the following:

        Given a positive integer :math:`n` find the largest integer :math:`x` such that :math:`x^2 \leq n`. This value is called the *integer square root* of :math:`n`.

    We are going to reason in the same way as we did to find an element in a sorted array.

    Suppose that we pick some value :math:`m` and compare :math:`m^2` to :math:`n`. What can we deduce?

    Since the function :math:`x \mapsto x^2` in *non-decresing*, we have the same kind of properties that we had with our sorted array:

    - if :math:`m^2 < n` then we can dismiss all values :math:`x < m`
    - if :math:`m^2 > n` then we can dismiss all values :math:`x > m`

    In the same was as before, we will keep track of the current interval that we are considering. You can select that interval by selecting :math:`L` and :math:`R` so that the answer is in the interval :math:`[L, R[`. In this case we can choose :math:`L = 0` and :math:`R = n + 1`.

    We can then write the following code:

    .. code:: java

        static int integerSqrt(int n) {
            long L = 0;
            long R = n + 1;
            while(R - L >= 2) {
                long M = (L + R) / 2;
                if(M * M <= n) L = M; // dismiss all values < M
                else R = M; // dismiss all values > M
            }
            return (int)L;
        }

    In the code, we use :code:`long` variables because the multiplication :code:`M * M` can overflow otherwise. The cast to :math:`int` in the end is safe since we know that the answer is at most :math:`n`.
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    memory: '1000'
    time: '1000'
name: Binary search - Square root
network_grading: false
problems:
    file:
        header: ''
        name: ''
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
