accessible: true
author: ''
context: |-
    In this task we will see that the same problem can have several DP formulations that can be more suited for some situations.

    Recall that we defined previously the DP subproblems as:

      :math:`dp(i, c)` is the maximum value we can obtain by
      selecting a subset of the objects :math:`0, 1 \ldots, i`
      from a knapsack of capacity :math:`c`.

    Note that we are basing ourselves on the bottom-up formulation.

    To relate the subproblems and define the recurrence relation we need to think about what happens depending on whether we decide to skip or take the :math:`i`-th item.
environment: java7
evaluate: best
groups: false
limits:
    memory: '100'
    time: '30'
    output: '2'
name: DP - Knapsack flipping state formulation
network_grading: false
problems:
    code:
        name: ''
        language: ''
        type: code
        header: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
