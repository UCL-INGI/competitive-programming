accessible: false
author: ''
context: |-
    Binary search is a fundamental technique in the development of algorithms and an essential tool in your algorithmist toolkit.

    In its most pure form, binary search is used to find an element in a sorted array. We will start by solving that problem. This is quite a straightforward thing to do but you will see that binary search is incredibly powerful and in the next tasks we will see how we can use it to solve problems that seem very complex at first.

    But first things first, let's solve the following problem:

        Given a sorted array :math:`a` of :math:`n` integers, how can we efficiently determine whether it contains a given target element :math:`t`?

    Denote by :math:`a[i:j]` the sub array of :math:`a` from indexes :math:`i` to :math:`j` (inclusive), that is, :math:`a[i], a[i + 1], \ldots, a[j]`.

    Let's say we check element at position :math:`i`. If :math:`a[i] = t` then we can report that :math:`a` contains :math:`t` at position :math:`i`. Otherwise, we either have :math:`a[i] < t` or :math:`a[i] > t`.

    Since :math:`a` is sorted, if :math:`a[i] < t` then we know that all elements before index :math:`i`, that is, :math:`a[0], a[1], \ldots, a[i - 1]` are also smaller than :math:`t`. Hence we can discard them and save us the trouble of comparing all of the against :math:`t`. In other words, we reduced the problem of finding :math:`t` in :math:`a` to the problem of finding :math:`t` in :math:`a[i+1:n-1]`.

    On the other case, when :math:`a[i] > t` we can apply an analogous reasoning to discard all elements after index :math:`i`.

    **Conclusion:** by checking any index :math:`i` we will either find :math:`i` or be able to discard all indexes smaller than :math:`i` or all indexes greater than :math:`i`. If we select :math:`i` to be the middle index, then we are sure that, in the worse case, we can discard *half* of the elements of the array.

    But then what do we do once we discarded half of the array?

    We can repeat the same process recursively on the new smaller array and discard half again and so on until either we find :math:`t` or we discard all elements of the array.

    In order to avoid copying the sub arrays, we will simply keep track of the index of the first and last elements of the array. Call them :math:`L` and :math:`R`, respectively. In the beginning we start with :math:`L = 0` and :math:`R = n - 1`. The middle element can be computed as

    .. math::

        M = (L + R) / 2

    where the division stands for integer division (so that for instance 5 / 2 = 2 and not 2.5).

    By what we said above, if :math:`a[M] < t` then we can discard the lower half of the array. This can be achieve by setting :math:`L` to :math:`M + 1`. If :math:`a[M] > t` then we can discard the upper half of the array by setting :math:`R` to :math:`M - 1`. We stop when the array becomes empty, that is, when :math:`L > R`, returning :math:`-1` indicating that :math:`t` is not an element of :math:`a`.

    In code we get the following:

    .. code:: java

        // iterative implementation
        static int binSearch(int[] a, int t) {
            int L = 0;
            int R = a.length - 1;
            while(L <= R) {
                int M = (L + R) / 2;
                if(a[M] == t) return M;
                if(a[M] < t) L = M + 1;
                if(a[M] > t) R = M - 1;
            }
            return -1;
        }

    You can also implement it recursively. Depending on the person, some people find one easier to read than the other.

    .. code:: java

        // recursive implementation
        static int binSearch(int[] a, int t) {
            return binSearchAux(a, t, 0, a.length - 1);
        }

        static int binSearchAux(int[] a, int t, int L, int R) {
            if(L > R) return -1;
            int M = (L + R) / 2;
            if(a[M] < t) return binSearchAux(a, t, M + 1, R);
            if(a[M] > t) return binSearchAux(a, t, L, M - 1);
            return M;
        }

    Whichever you use, should not really matter except that maybe the recursive implementation may have some little overheard because of the recursion stack. In most problems that should not have any impact and you should use the one you feel more comfortable with.

    In most programming languages, this function is already implemented. For instance, in Java, you can use :code:`Arrays.binarySearch()`.
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    memory: '1000'
    time: '1000'
name: Binary search - Introduction
network_grading: false
problems:
    file:
        header: |-
            Given a sorted array :math:`a` you will be given :math:`q` queries each with an integer :math:`t`. For each query you need to find, if one exists, the minimum index :math:`i` such that :math:`a[i] = t`.

            Note that the code above does not necessarily find the minimum index. You will need to modify the code in order to achieve this.

            **Input**

            - One line with two integers :math:`n` and :math:`q` giving the size of the array and the number of queries.

            - :math:`n` integers separated giving the values :math:`a_i` of :math:`a`.

            - :math:`q` lines each with one integer :math:`t` giving the query target.

            **Constraints**

            * :math:`1 \leq n \leq 10^5`
            * :math:`-2^{30} \leq a_i \leq 2^{30}`
            * :math:`1 \leq q \leq 10^5`
            * :math:`-2^{30} \leq t \leq 2^{30}`

            **Output**

            :math:`q` lines, each with a single integers giving the *minimum index* of :math:`t` in :math:`a` or :math:`-1` if no such index exists.

            **Sample Test Cases**

            `Sample input 1 <binsearch-intro/1.in>`_

            `Sample output 1 <binsearch-intro/1.ans>`_


            `Sample input 2 <binsearch-intro/2.in>`_

            `Sample output 2 <binsearch-intro/2.ans>`_
        name: Find first occurence in sorted array
        type: file
        allowed_exts:
        - .java
        - .cpp
        - .py
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
