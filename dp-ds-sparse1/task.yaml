accessible: false
author: ''
context: |-
    We are now going to discuss sparse tables. Sparse table are great at answering a wide range of queries. We will start by discussing range minimum queries (RMQ) and then see how we can extend them to other kind of queries.

    |

    **The range minimum query problem on an fixed array** :math:`a` **of length** :math:`n`:

    - Input: a range :math:`[i, j]`.
    - Output: :math:`\min (a[i], a[i + 1], \ldots, a[j])`

    *Note:* whenever we mention a range :math:`[i, j]` we assume that :math:`i \leq j`.

    |

    There are several possible solution for this problem. Using sparse table we will be able to solve it in :math:`\langle O(n \cdot \log(n)), O(1) \rangle`.

    The general idea to solve this problem is similar to the one we used for the range sum query problem: *precompute the solution on some ranges and use express any range as a funcion of the precomputed ranges*.

    Let's define a states space consisting of the pairs :math:`(i, j)` and subproblems :math:`rmq(i, j)` as

    ..  math::

        rmq(i, j) = \min(a[i], a[i + 1], \ldots, a[j])

    The :math:`\min` funcion the nice property that if we have to ranges :math:`[i, k_1]` and :math:`[k_2, j]` covering :math:`[i, j]` then, even if those ranges overlap, taking the minimum of both will yield the minimum of range :math:`[i, j]`. More formaly, if :math:`k_2 \leq k_1`, then

    .. math::

       rmq(i, j) = \min(rmq(i, k_1), rmq(k_2, j))

    This means that all we need is to precompute :math:`rmq` on a set of ranges such that *any range can be covered by two of those ranges, eventually with overlap*.

    If we precompute :math:`rmq` over all ranges that have a size equal to a power of :math:`2` then that is clearly enough. To see this, imagine that we want to cover a range of size :math:`s`. Then we compute the largest power of two that is smaller than or equal to :math:`s`. That is, the largest :math:`k` such that :math:`2^k \leq s`. Two such intervals can cover :math:`2^k + 2^k = 2^{k + 1} > s` elements. Therefore they can obvisouly cover the :math:`s` elements of the range that we wanted to cover.

    To make things less abstract, let's consider a few concrete examples.

      Example with :math:`s = 11`. The largest power of :math:`2` that
      is less than or equal to 11 is :math:`8`. By placing one interval
      in the beginning and another in the end we cover all positions.

      .. image:: dp-ds-sparse1/rmq1.png

      |

      Example with :math:`s = 15`. Again, 8 is the largest power of 2
      since the next one is 16. We can see that we are able to cover the
      range with 2 ranges of size 8.

      .. image:: dp-ds-sparse1/rmq2.png

      |

      Example with :math:`s = 16`. Since the size of the array is a
      power of :math:`2` a single array is enough to cover it.

      .. image:: dp-ds-sparse1/rmq3.png

    Now that we have build a basic idea to solve the problem let's dive into the details.

    We define a matrix :math:`R` such that :math:`R[i][k]` is minimum of the range starting at :math:`i` with size :math:`2^k`. In other words,

    .. math::

       R[i][k] = rmq(i, i + 2^k - 1)

    To compute :math:`R` we first compute all values for :math:`k = 0`. We have

    .. math::

       R[i][0] = rmq(i, i + 2^0 - 1) = rmq(i, i) = a[i]

    To compute :math:`R[i][k]` for :math:`k > 0` we simply cover the corresponding interval of size :math:`2^k` with two intervals of size :math:`2^{k - 1}`. One starting at :math:`i` and the other at :math:`i + 2^{k - 1}` so that we cover the inverval exactly.

    .. math::

       R[i][k] = \min(R[i][k - 1], R[i + 2^k][k - 1])
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: 'DP - Data structures: sparse table for RMQ'
network_grading: false
order: 22
problems:
    file:
        name: ''
        header: ''
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
