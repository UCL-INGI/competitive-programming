accessible: false
author: ''
context: |-
    Dijkstra's algorithm is an algorithm to compute shortest paths in graphs with **non-negative** edge weights.

    As BFS, we will design the algorithm to receive a source node :math:`s` as input and compute the shortest path distances to each other node in the graph.

    The idea is that we will explore the graph while keeping an array :math:`dist` representing shortest path distance and satisfying the following invariant:

        At all times, :math:`dist[v]` is equal to the shortest path distance from :math:`s` to :math:`v` passing only by visited nodes. If :math:`v` is not visited, :math:`dist[v] = \infty`.

    Clearly, one all nodes are visited, our invariant reads:

        :math:`dist[v]` is equal to the shortest path distance from :math:`s`to :math:`v`
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    time: '1000'
    memory: '1000'
name: Graphs - Dijkstra
network_grading: false
problems:
    file:
        language: ''
        name: ''
        default: ''
        header: ''
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
