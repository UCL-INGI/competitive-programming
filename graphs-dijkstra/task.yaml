accessible: true
author: ''
context: |-
    Dijkstra's algorithm is an algorithm to compute shortest paths in graphs with **non-negative** edge weights. Denote by :math:`w(u, v)` the weight of edge :math:`(u, v)`.

    As BFS, we will design the algorithm to receive a source node :math:`s` as input and compute the shortest path distances to each other node in the graph.

    Let :math:`dist` be an array such that :math:`dist[v]` is equal to the shortest path distance between node :math:`s` and node :math:`v`.
    The idea of Dijkstra's algorithm is to keep a set of nodes :math:`S` for which we know the value of :math:`dist` and grow it until :math:`S = V`.

    Since there are no negative edge weights, we know that :math:`dist[s] = 0`. This means that we can initialize :math:`S = \{s \}`. For the other nodes, we initially set :math:`dist[v] = \infty`.

    Given the set :math:`S`, how can we find a new node to add to it and its distance?

    We will consider all edges that go from a node in :math:`S` to a node outside of :math:`S`. From all such edges, we will pick an edge :math:`(u, v)` such that :math:`dist[u] + w(u, v)` is **minimum**. Then, it is not hard to see that, :math:`dist[v] = dist[u] + w(u, v)`.

    To convince yourself that this is indeed the case, imagine that there is a better way of reaching :math:`v`. Since :math:`s \in S` and :math`v \notin S`, this alternative path must at some point exit the set :math:`S`. Suppose that it does to by an edge :math:`(x, y)` other than :math:`(u, v)`. The following figure illustrates the situation:

    .. image:: graphs-dijkstra/dijkstra1.png

    |

    Then, the path (shown in orange) will have the form :math:`(s, \ldots, x, y, \ldots, v)`. Its cost will be

    .. math::

        dist[x] + w(x, y) + cost(x, y)

    where

    - :math:`dist[x]` is the cost of reaching :math:`x` from :math:`s`
    - :math:`w(x, y)` is the cost of edge :math:`(x, y)`
    - :math:`cost(x, y)` is the cost of the path from :math:`x` to :math:`y`

    On the other hand, the blue path has cost:

    .. math::

        dist[u] + w(u, v)

    And we must have

    .. math::

        dist[u] + w(u, v) \leq dist[x] + w(x, y) + cost(x, y)

    because we selected :math:`u` such that :math:`dist[u] + w(u, v) \leq dist[x] + w(x, y)` and we know that, since the edge weights are non-negative, :math:`cost(x, y) \geq 0`.

    After this discussion it should be quite straightforward for you implement Dijkstra's algorithm. The high level ideas is the following:

    1. Initialize :math:`dist[s] = 0` and :math:`dist[v] = \infty` for each :math:`v \neq s`
    2. Set :math:`S = \{s\}`
    3. While :math:`S \neq V`, pick :math:`(u, v) \in E` such that :math:`u \in S, v \notin S` and :math:`dist[u] + w(u, v)` is minimum and set :math:`dist[v] = dist[u] + w(u, v)`.

    Now the only question is how fast can we perform the edge selection in step 3. The naive way of doing so is to simply loop over each node :math:`u \in S` and each edge out of :math:`u` to check the condition and get the minimum. This would cost :math:`O(|E|)` making the algorithm run in :math:`O(|V| |E|)` since there are :math:`|V|` iterations.

    A more efficient alternative is to use a *priority queue*. A priority queue enables to maintain a queue of ordered elements and retrieve the minimal element in the order efficiently. In our context, the elements will be the edges sorted by their value of :math:`dist[u] + w(u, v)`.

    The Java code doing this is given below. Note that we do not need to explicitly keep track of the set :math:`S`. In the way the code is written this set is always equal to the set of nodes such that :math:`dist[u] \neq \infty`.

    .. code:: java

        // class used to represent edges
        static class Edge {

            public int orig, dest, cost;

            public Edge(int orig, int dest, int cost) {
                this.orig = orig;
                this.dest = dest;
                this.cost = cost;
            }

            public String toString() {
                return String.format("(%d, %d, %d)", orig, dest, cost);
            }

        }

        // class used to compare edges in the priority queue
        static class EdgeCmp implements Comparator<Edge> {

            private int[] dist;

            public EdgeCmp(int[] dist) {
                this.dist = dist;
            }

            public int compare(Edge e1, Edge e2) {
                double v1 = dist[e1.orig] + e1.cost;
                double v2 = dist[e2.orig] + e2.cost;
                return Double.compare(v1, v2);
            }

        }

        static int[] disjktra(LinkedList<Edge>[] g, int s) {
            // initialize distances
            int[] dist = new int[g.length];
            Arrays.fill(dist, Integer.MAX_VALUE);
            dist[s] = 0;
            // initialize PQ
            PriorityQueue<Edge> Q = new PriorityQueue<>(new EdgeCmp(dist));
            for(Edge e : g[s]) Q.add(e);
            while(!Q.isEmpty()) {
                Edge mine = Q.poll();
                // check whether the edge goes out of S
                if(dist[mine.dest] == Integer.MAX_VALUE) {
                    dist[mine.dest] = dist[mine.orig] + mine.cost;
                    for(Edge e : g[mine.dest]) {
                        Q.add(e);
                    }
                }
            }
            return dist;
        }


    The runtime of this algorithm is :math:`O(|E| \log(|V|))` since each edge will be at most one time in the queue and the priority queue :code:`poll` and :code:`add` operations are perfomed in logarithmic time with respect to the size of the queue. The maximum size of the queue is :math:`|E|` so the maximum runtime of a queue operation is :math:`O(\log(|E|)) = O(\log(|V|^2)) = O(\log(|V|))`.
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    output: '100'
    memory: '1000'
    time: '1000'
name: Graphs - Dijkstra
network_grading: false
order: 15
problems:
    file:
        name: Single source shortest path
        allowed_exts:
        - .java
        - .cpp
        - .py
        header: |
            Put the pieces together in order to be able to compute shortest paths in an *undirected* graph with non negative edge weights.

            **Input**

            - One line with fours integers :math:`n`, :math:`m`, :math:`s` and :math:`t` giving the number of nodes, the number of edges, the source of the path and the destination.

            - :math:`m` lines each with with three integers :math:`u, v` and :math:`c` giving that nodes :math:`u` and :math:`v` are connected with a bidirectional edge of cost :math:`c`.

            The nodes are numbered starting from 0.

            **Output**

            A single integer with the cost of the shortest path from node :math:`s` to node :math:`t` or the word :code:`unreachable`.

            **Constraints**

            * :math:`1 \leq n \leq 50000`
            * :math:`1 \leq m \leq 150000`
            * :math:`0 \leq s, t < n`
            * :math:`0 \leq w \leq 1000`

            **Sample Test Cases**

            `Sample input 1 <graphs-dijkstra/1.in>`_

            `Sample output 1 <graphs-dijkstra/1.ans>`_


            `Sample input 2 <graphs-dijkstra/2.in>`_

            `Sample output 2 <graphs-dijkstra/2.ans>`_
        type: file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
