accessible: true
author: Fran√ßois Aubry
context: ''
environment: pyjavacpp
evaluate: best
groups: false
input_random: '0'
limits:
    time: '1000'
    output: '100'
    memory: '1000'
name: 'Graphs - Problem: Dominos'
network_grading: false
order: 15
problems:
    file:
        name: Dominoes
        allowed_exts:
        - .java
        - .cpp
        - .py
        type: file
        header: |-
            Adapted from: `UVa 11504 <https://uva.onlinejudge.org/external/115/11504.pdf>`_

            Dominoes are lots of fun. Children like to stand the tiles on their side in long lines. When one domino falls, it knocks down the next one, which knocks down the one after that, all the way down the line.

            However, sometimes a domino fails to knock the next one down. In that case, we have to knock it down by hand to get the dominoes falling again.

            Your task is to determine, given the layout of some domino tiles, the minimum number of dominoes that must be knocked down by hand in order for all of the dominoes to fall.

            **Input**

            - One line with two integers :math:`n` and :math:`m` giving the number of dominoes and the number pairs of dominoes that make each other fall.

            - :math:`m` lines each with two integers :math:`i` and :math:`j` giving that if :math:`i` falls then domino :math:`j` also falls.

            Note that in this problem a domino may cause any number of other dominoes to fall.

            **Constraints**

            * :math:`1 \leq n \leq 100000`
            * :math:`0 \leq m \leq 1000000`
            * :math:`0 \leq i, j < n`

            **Output**

            - One line with the minimum number of dominoes that we need to push in order to make all dominoes fall.

            **Sample Test Cases**

            `Sample input 1 <graphs-prob-dominos/1.in>`_

            `Sample output 1 <graphs-prob-dominos/1.ans>`_


            `Sample input 2 <graphs-prob-dominos/2.in>`_

            `Sample output 2 <graphs-prob-dominos/2.ans>`_
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
